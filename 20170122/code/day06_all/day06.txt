1,转发与重定向的区别
	(1)转发可以共享request对象，而重定向不可以。
	注：
		当容器收到请求之后，会创建request对象和
	response对象,当响应发送完毕，容器会立即销毁
	这两个对象。
	(2)转发之后，浏览器地址栏的地址不变，而重定
	向会变。
	(3)转发的目的地必须是同一个应用，而重定向没有
	限制。

2,处理异常
	(1)转发给一个异常处理页面(编程式)
		step1,捕获异常
		step2,记录日志
		step3,转发给一个异常处理页面	
	(2)交给容器来处理(声明式)
		step1,捕获异常
		step2,记录日志
		step3,抛出异常给容器
		step4,配置异常处理页面
			<error-page>
   				<exception-type>javax.servlet.ServletException</exception-type>
   				<location>/error2.jsp</location>
   			</error-page>
   	小结:
   		一般来说，系统异常(程序无法恢复的异常，比如
	数据库服务暂停等)可以交给容器来处理。而应用
	异常(比如用户名或密码错误等,是可以恢复的异常)
	，可以使用转发的方式。
	
3, 容器如何处理请求资源路径?
	比如，在浏览器地址栏输入
	http://ip:port/web06_2/abc.html
	浏览器会将"/web06_2/abc.html"(请求资源路径)
	发送给容器。
	step1,容器会依据应用名找到应用所在的文件夹。
	step2,容器会假设访问的是一个servlet，会查找
	web.xml文件，然后进行相应的匹配:
		(1)精确匹配
			<url-pattern>的值必须是"/abc.html"。
		(2)通配符匹配
			使用"*"匹配任意的0个或者多个字符。
			比如
				<url-pattern>/*</url-pattern>
		(3)后缀匹配
			 使用"*."开头，后接任意的多个字符。
			 比如
			 	<url-pattern>*.do</url-pattern>	
			 	匹配所有以".do"结尾的请求	
	step3,如果以上均不匹配，容器会查找相应位置的
	文件。
4, 如何让一个servlet处理多种请求
	step1,使用后缀匹配
		比如
			<servlet-mapping>
    			<servlet-name>SomeServlet</servlet-name>
    			<url-pattern>*.do</url-pattern>
  			</servlet-mapping>
  	step2,分析请求资源路径，然后调用不同的
  			分支来处理。
  			
  练习：
  	  将员工信息管理案例中的所有servlet合并成一个
  	  ActionServlet(要处理异常)。
  	  
 5,路径问题
 	链接,表单提交,重定向,转发
 	<a href="">
 	<form action="">
 	response.sendRedirect("")
 	request.getRequestDispatcher("")
 	(1)相对路径
 		不以"/"开头的路径
 	(2)绝对路径
 		以"/"开头的路径
 	(3)如何写绝对路径
 		链接,表单提交,重定向从应用名开始写，
 		转发从应用名之后开始写。
 		注：
 			不要直接将应用名写在路径里面，而应该
 		使用request.getContextPath()来获得实际部署
 		时的应用名。
 		
 6,状态管理
 	(1)什么是状态管理?
 			将浏览器与web服务器之间多次交互当做一个
 		整体来看待，并且将多次交互所涉及的数据(状态)
 		 保存下来。
 		 状态管理要解决两个问题:
 		 	a, 身份的识别
 		 	b, 状态的维护
 	(2)如何进行状态管理?
 		a,将状态保存在客户端(浏览器),比如
 		cookie技术。
 		b,将状态保存在服务器端,比如session技术
 	(3)cookie
 		1)cookie是什么?
 		  服务器临时保存在浏览器端的少量的数据。
 		2)cookie工作原理
 			当浏览器访问服务器时，服务器会将少量
 		数据以set-cookie消息头的方式发送给浏览器，
 		浏览器会将这些数据临时保存下来；
 			当浏览器再次访问服务器时，会将之前保存
 		的数据以cookie消息头的方式发送过去。
 		3)添加cookie
 			Cookie c = new Cookie(String name,String value);	
 			response.addCookie(c);
 	
  	  
  			
	
		